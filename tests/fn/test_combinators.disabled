from sumps.func.combinators import apply, bluebird, idiot, kestrel, kite, mockingbird, thrush, z_fixed_point


def test_apply():
    add_one = lambda x: x + 1
    double = lambda x: x * 2
    result = apply(add_one, double)
    assert result(5) == 11  # add_one(double(5)) = add_one(10) = 11


def test_bluebird():
    add_one = lambda x: x + 1
    double = lambda x: x * 2
    triple = lambda x: x * 3
    result = bluebird(add_one, double, triple)
    assert result(2) == 13  # add_one(double(triple(2))) = add_one(double(6)) = add_one(12) = 13


def test_idiot():
    value = 42
    assert idiot(value) == value


def test_kestrel():
    assert kestrel(1, 2) == 1


def test_kite():
    assert kite(1, 2) == 2


def test_thrush():
    add_one = lambda x: x + 1
    result = thrush(add_one, 5)
    assert result == 6  # add_one(5) = 6


def test_mockingbird():
    double = lambda x: x * 2
    result = mockingbird(double)
    assert result(3) == 12  # double(double(3)) = double(6) = 12


def test_z_fixed_point_factorial():
    fact = z_fixed_point(lambda rec: lambda x: 1 if x == 0 else rec(x - 1) * x)
    assert fact(0) == 1
    assert fact(1) == 1
    assert fact(5) == 120